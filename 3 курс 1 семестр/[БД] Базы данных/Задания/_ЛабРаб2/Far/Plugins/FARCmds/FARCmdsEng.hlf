.Language=English,English (English)
.PluginContents=FAR Commands

@Contents
$^#FAR Commands#
   The FAR Commands Plugin (FARCmds) provides additional features that may
be used in the User Menu, file associations or the command line.

   ~Syntax~@Syntax@
   ~"Same Directory" Command~@TheSameCatalogue@
   ~Configuring FAR Commands~@Config@

@Syntax
$^#FARCmds Syntax
   #Command Line Syntax#

   <prefix>:<command>[<options>] <object>

  or

   <command>:[<options>] <object>

   where
   #<prefix>#    - always #far#

   #<command>#   - one of the following:
                 ~view~@View@    - Viewer
                 ~edit~@Edit@    - Editor
                 ~goto~@Goto@    - Go to given file or directory
                 ~clip~@Clip@    - Put data in the clipboard
                 ~whereis~@WhereIs@ - Locate and jump to given object
                 ~macro~@Macro@   - Macros
                 ~ln~@Ln@      - Create a link

   #<options>#   - applies for the "edit" command only; it may be:
                 #[line]#
                 #[line,column]#
                 The square brackets are mandatory.

   #<object>#    - one of the following:
                 #filename#  - name of the file to be viewed,
                             edited or jumped to.
                 #path#      - file or directory path to jump to.
                 #<command#  - an operating system command
                             The #<# character is mandatory.
                 #<<command# - an operating system command
                             The #<# character is mandatory.

   Note:

   A command can be executed in a directory different from the
   current directory if the path enclosed in #'|'# characters is
   specified before an operating system command .
   Example: '#edit:<|%TEMP%|dir#'.

   See also: ~Contents~@Contents@ | ~Output Redirection~@Direction@ | ~Notes~@Remark@

@Clip
$^#The Clip command#
   The #clip# command allows to put data (the contents of a given file
or the output of a program) into the Windows clipboard. The clipboard
will contain all the data up to the character with the code #0x00#,
at most 1 megabyte.

   #far:clip filename#
   or
   #clip:filename#

   See also: ~Output Redirection~@Direction@ | ~Notes~@Remark@

@View
$^#The View command#
   The #view# command opens the file given in "#filename#" in the FAR
internal viewer:

   #far:view filename#
   or
   #view:filename#

   See also: ~Output Redirection~@Direction@ | ~Notes~@Remark@

@Edit
$^#The Edit command#
   The #edit# command opens the file given in "#filename#" for editing
in the FAR internal editor. The command may be called in three ways:

   1. Open file for editing

      #far:edit filename#
      or
      #edit:filename#

   2. Open file for editing and go to the line "#<line>#"

      #far:edit[<line>] filename#
      or
      #edit:[<line>] filename#

   3. Open a file for editing and go to the given position

      #far:edit[<line>,<column>] filename
      or
      #edit:[<line>,<column>] filename#

   If the file "#filename#" does not exist, it is created. If after creating
the file and leaving the editor the file has not been changed, it is deleted
(the behaviour imitates Shift-F4).

   If the name of a file contains square brackets, for example, "[1].txt",
in order to open it for editing, you need either to add at least one
delimiter (for example, a space) before the file name, or to enclose the
file name in quotation marks:

   edit: [1].txt
   edit:"[1].txt"

   See also: ~Output Redirection~@Direction@ | ~Notes~@Remark@

@Goto
$^#The Goto command#
   The #goto# command allows to jump to the given file or directory in one
of two ways:

   1. The path to the file or directory is specified directly in the command

      #far:goto path#
      or
      #goto:path#


   2. The path to the file or directory is taken from a given file "#filename#"

      #far:goto <filename#
      or
      #goto: <filename#

   If the "#path#" parameter specifies a directory and is terminated with
a backslash ('#\#'), the plugin jumps to the specified directory. If the
path to the directory is not terminated with a backslash, the cursor on the
panels is set to the specified directory.

   At most 1299 bytes are read from the file "#filename#" to specify
the path to a directory or file.

   When the panels are turned off, the cursor does not get positioned to
the specified object. FAR only changes to the required directory.

   See also: ~Contents~@Contents@ | ~Notes~@Remark@

@Ln
$ #The Ln command#
   The #ln# command allows to create ~links~@:HardSymLink@ for files
and directories. Hard links are created for files, and symbolic links
are created for directories. It is also use the "ln" command to mount
local drives onto the file system (to create so called "volume mount
points").

   #far:ln [/msg] source target#
   or
   #ln:[/msg] source target#

   If the source is a:

     #File#         - a hard link is created
     #Directory#    - a symbolic link is created
     #Drive letter# - if the source is a sequence 'drive letter' ':' '\'
                      (for example "C:\"), the drive is mounted

   The key #/msg# enables error message display.

   Volume mount points are a feature of Windows 2000/XP that allows to map
drives onto directories. For example, it is possible to have a single
C: drive and to mount the CD-ROM drive to C:\cdrom and the second physical
drive to C:\home. Therefore, the file system hierarchy will have a single
root.

   See also: ~Contents~@Contents@ | ~Notes~@Remark@

@WhereIs
$ #The WhereIs command#
   The #whereis# command locates the given object and, if the search is
successful, jumps to it.

   #far:whereis filename#
   or
   #whereis:filename#

   The search is done in the following order:
   1. The current directory
   2. Windows 95/98/Me: The Windows system directory.
      Windows NT/2000 or later: The 32-bit Windows system directory.
   3. Windows NT/2000 or later: The 16-bit Windows system directory.
   4. The Windows directory.
   5. The directories listed in the environment variable #PATH#
   6. Contents of the registry branch:
      #HKCU\Software\Microsoft\Windows\CurrentVersion\App Paths#
   7. Contents of the registry branch:
      #HKLM\Software\Microsoft\Windows\CurrentVersion\App Paths#

   When the panels are turned off, the cursor does not get positioned to
the specified object. FAR only changes to the required directory.

   See also: ~Contents~@Contents@ | ~Notes~@Remark@

@Macro
$ #The Macro command#
   The #macro# command reloads the macros from the registry or saves the
macros to the registry.

   1. Load the macros from the registry:

      #far:macro load#
      or
      #macro:load#

   2. Save the macros to the registry:

      #far:macro save#
      or
      #macro:save#

   3. Post a key sequence:

      #far:macro post sequence#
      or
      #macro:post sequence#

      Here "sequence" is a sequence of key names as stored by FAR
      in the registry. For example:

      macro:post F4 F12 0 Tab F4 F12 0

      The sequence of the posted keys is executed only after control
      is returned to the FAR Manager. That is, when you want to open
      a file in the editor and move to the end of that file, you
      should first post the keys to move to the end of file, and
      then open the editor.

   See also: ~Contents~@Contents@

@Direction
$^#Output Redirection#
   The plugin can redirect the output of the given "#command#" to a
temporary file and then open it in the viewer or editor.

     in the viewer -
       #far:view <command#
       #view:<command#

     in the editor -
       #far:edit <command#
       #edit:<command#
       #far:edit[line] <command#
       #edit[line]:<command#
       #far:edit[line,column] <command#
       #edit[line,column]:<command#

     or the contents of the output file can be put into the clipboard

       #far:clip <command#
       #clip:<command#

   Notes:

   1. Everything after the '#<#' character is passed to the command
      processor (%COMSPEC%).

   2. The temporary file is deleted automatically when FAR doesn't
      need it anymore.

   3. Some programs, instead of writing text to the standard output
      that can be captured by the plugin, output the text directly
      to the console. To save the console output for viewing through
      #Ctrl-O#, use the characters '#<<#' instead of '#<#'.
      This behaviour can be set as the default in the
      ~plugin configuration~@Config@.

   See also: ~Contents~@Contents@ | ~Syntax~@Syntax@

@TheSameCatalogue
$^#Same Directory#
   To set the same directory in the passive panel as in the active one,
select the item "#Same Directory#" in the ~plugins menu~@:Plugins@
or in the ~disks menu~@:DriveDlg@.

   See also: ~Contents~@Contents@ | ~Configuration~@Config@

@Remark
$^#Notes#

   1. Command names may be shortened to their first letters.
   2. It is possible to put parameters #filename#,
      #path# and #command# in quotes.
   3. It is possible to use environment variables.
   4. If you make a syntax error, the help will pop up.

   See also: ~Contents~@Contents@

@Config
$^#Configuring FAR Commands#
 #Add "Same Directory" to the Plugins menu#

   Enables adding of the ~Same Directory~@TheSameCatalogue@ command
to the ~Plugins menu~@:Plugins@.

 #Add "Same Directory" to the Disks menu#

   Enables adding of the ~Same Directory~@TheSameCatalogue@ command
to the ~Disks menu~@:DriveDlg@.

 #Disks menu hotkey ('1'-'9'). Set 0 to autoassign#

   Specifies the hotkey for the "Same Directory" command in the
Disks menu. If the hotkey is set to 0, it is assigned automatically.

 #Keep external command output#

   Saves the text that programs write directly to the console
(bypassing the standard output) and makes it available for viewing
through #Ctrl-O#.
   Enabling this option has the same effect as using #<<# instead
of #<#.

   See also: ~Contents~@Contents@
