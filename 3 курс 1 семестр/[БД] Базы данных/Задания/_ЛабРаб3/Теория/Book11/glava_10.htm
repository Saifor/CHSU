<html>
<head>
<title>3.1. Основные особенности систем, основанных на инвертированных списках</title>
		    <style type="text/css">
A.noneline { font-family: Arial, Serif; text-decoration: none; }
FONT.arial { font-family: Arial, Serif; }
TD.arial   { font-family: Arial, Serif; }
TH.arial   { font-family: Arial, Serif; }
PRE        { font-family: Monospace; color: navy; }
SAMP       { font-family: Monospace; color: navy; }
TT         { font-family: Monospace; color: navy; }
VAR        { font-family: Monospace; color: navy; }
</style>
</head>
<body bgcolor="#FFF5EE" text="#000000" link="#FF0000" alink="#FF0000" vlink="#A52A2A">
<basefont size="3">
<center>
<table width=100% border=0 cellpadding=0>
<tr valign=top><td class=arial><a href="http://www.citforum.ru/"><img height=50 width=150 src="_pic_/logo3D.gif" alt="Server for Information Technologies" border=0></a><br>
</td>
<td align=right class=arial>
<font size="-2">
Сервер поддерживается<br>
<a class=noneline href="http://www.citmgu.ru">Центром Информационных Технологий</a><br>
(095) 932-9212, 932-9213, 939-0783<br>
E-mail: <a class=noneline href="mailto:info@citforum.ru?Subject='From page topic CIT-FORUM'">info@citforum.ru</a></font>
</tr>
<tr>
<th colspan=2 class=arial>
<font color=#000080 size=2><a href="http://www.citforum.ru" class=noneline>Сервер Информационных Технологий</a> содержит море(!) аналитической информации</font>
<hr noshade>
</th>
</tr>
</table>
</center>
<h4><a name="_1_3_1">3.1. Основные особенности систем, основанных на инвертированных списках</a></h4>
<p>
К числу наиболее известных и типичных представителей таких систем относятся Datacom/DB компании Applied Data Research, Inc. (ADR), ориентированная на использование на машинах основного класса фирмы IBM, и Adabas компании Software AG.
<p>
Организация доступа к данным на основе инвертированных списков используется практически во всех современных реляционных СУБД, но в этих системах пользователи не имеют непосредственного доступа к инвертированным спискам (индексам). Кстати, когда мы будем рассматривать внутренние интерфейсы реляционных СУБД, вы увидите, что они очень близки к пользовательским интерфейсам систем, основанных на инвертированных списках.
<h5><a name="_1_3_1_1">3.1.1. Структуры данных</a></h5>
<p>
База данных, организованная с помощью инвертированных списков, похожа на реляционную БД, но с тем отличием, что хранимые таблицы и пути доступа к ним видны пользователям. При этом:
<OL TYPE = a>
<LI>Строки таблиц упорядочены системой в некоторой физической последовательности.
<LI>Физическая упорядоченность строк всех таблиц может определяться и для всей БД (так делается, например, в Datacom/DB).
<LI>Для каждой таблицы можно определить произвольное число ключей поиска, для которых строятся индексы. Эти индексы автоматически поддерживаются системой, но явно видны пользователям.
</OL>
<h5><a name="_1_3_1_2">3.1.2. Манипулирование данными</a></h5>
<p>
Поддерживаются два класса операторов:
<OL TYPE = a>
<LI>Операторы, устанавливающие адрес записи, среди которых:
</OL>
<UL TYPE = disc>
<LI>прямые поисковые операторы (например, найти первую запись таблицы по некоторому пути доступа);
<LI>операторы, находящие запись в терминах относительной позиции от предыдущей записи по некоторому пути доступа.
<OL TYPE = a>
<LI></UL>
<LI>Операторы над адресуемыми записями
</OL>
<p>
Типичный набор операторов:
<UL TYPE = disc>
<LI>LOCATE FIRST - найти первую запись таблицы T в физическом порядке; возвращает адрес записи;
<LI>LOCATE FIRST WITH SEARCH KEY EQUAL - найти первую запись таблицы T с заданным значением ключа поиска K; возвращает адрес записи;
<LI>LOCATE NEXT - найти первую запись, следующую за записью с заданным адресом в заданном пути доступа; возвращает адрес записи;
<LI>LOCATE NEXT WITH SEARCH KEY EQUAL - найти cледующую запись таблицы T в порядке пути поиска с заданным значением K; должно быть соответствие между используемым способом сканирования и ключом K; возвращает адрес записи;
<LI>LOCATE FIRST WITH SEARCH KEY GREATER - найти первую запись таблицы T в порядке ключа поиска K cо значением ключевого поля, большим заданного значения K; возвращает адрес записи;
<LI>RETRIVE - выбрать запись с указанным адресом;
<LI>UPDATE - обновить запись с указанным адресом;
<LI>DELETE - удалить запись с указанным адресом;
<LI>STORE - включить запись в указанную таблицу; операция генерирует адрес записи.
</UL>
<h5><a name="_1_3_1_3">3.1.3. Ограничения целостности</a></h5>
<p>
Общие правила определения целостности БД отсутствуют. В некоторых системах поддерживаются ограничения уникальности значений некоторых полей, но в основном все возлагается на прикладную программу.
<p><center><a href="glava_9.htm">Предыдущая глава</a> || <a href="contents.htm">Оглавление</a> || <a href="glava_11.htm">Следующая глава</a><p>
<p></p>
<hr noshade>
<center>
<font size=1 class=arial>
Comments: <a href="mailto:info@citmgu.ru?Subject='From bottom of CIT FORUM'" class=noneline>info@citmgu.ru</a><br>
Copyright &copy; <a href="http://www.citmgu.ru/" class=noneline>CIT</a>
</font></center></body></html>
