<html>
<head>
<title>6.2. Семантическое моделирование данных, ER-диаграммы</title>
		    <style type="text/css">
A.noneline { font-family: Arial, Serif; text-decoration: none; }
FONT.arial { font-family: Arial, Serif; }
TD.arial   { font-family: Arial, Serif; }
TH.arial   { font-family: Arial, Serif; }
PRE        { font-family: Monospace; color: navy; }
SAMP       { font-family: Monospace; color: navy; }
TT         { font-family: Monospace; color: navy; }
VAR        { font-family: Monospace; color: navy; }
</style>
</head>
<body bgcolor="#FFF5EE" text="#000000" link="#FF0000" alink="#FF0000" vlink="#A52A2A">
<basefont size="3">
<center>
<table width=100% border=0 cellpadding=0>
<tr valign=top><td class=arial><a href="http://www.citforum.ru/"><img height=50 width=150 src="_pic_/logo3D.gif" alt="Server for Information Technologies" border=0></a><br>
</td>
<td align=right class=arial>
<font size="-2">
Сервер поддерживается<br>
<a class=noneline href="http://www.citmgu.ru">Центром Информационных Технологий</a><br>
(095) 932-9212, 932-9213, 939-0783<br>
E-mail: <a class=noneline href="mailto:info@citforum.ru?Subject='From page topic CIT-FORUM'">info@citforum.ru</a></font>
</tr>
<tr>
<th colspan=2 class=arial>
<font color=#000080 size=2><a href="http://www.citforum.ru" class=noneline>Сервер Информационных Технологий</a> содержит море(!) аналитической информации</font>
<hr noshade>
</th>
</tr>
</table>
</center>
<h4><a name="_2_3_2">6.2. Семантическое моделирование данных, ER-диаграммы</a></h4>
<p>
Широкое распространение реляционных СУБД и их использование в самых разнообразных приложениях показывает, что реляционная модель данных достаточна для моделирования предметных областей. Однако проектирование реляционной базы данных в терминах отношений на основе кратко рассмотренного нами механизма нормализации часто представляет собой очень сложный и неудобный для проектировщика процесс.
<p>
При этом проявляется ограниченность реляционной модели данных в следующих аспектах:
<UL TYPE = disc>
<LI>Модель не предоставляет достаточных средств для представления смысла данных. Семантика реальной предметной области должна независимым от модели способом представляться в голове проектировщика. В частности, это относится к упоминавшейся нами проблеме представления ограничений целостности.
<LI>Для многих приложений трудно моделировать предметную область на основе плоских таблиц. В ряде случаев на самой начальной стадии проектирования проектировщику приходится производить насилие над собой, чтобы описать предметную область в виде одной (возможно, даже ненормализованной) таблицы.
<LI>Хотя весь процесс проектирования происходит на основе учета зависимостей, реляционная модель не предоставляет каких-либо средств для представления этих зависимостей.
<LI>Несмотря на то, что процесс проектирования начинается с выделения некоторых существенных для приложения объектов предметной области (&quot;сущностей&quot;) и выявления связей между этими сущностями, реляционная модель данных не предлагает какого-либо аппарата для разделения сущностей и связей.
</UL>
<h5><a name="_2_3_2_1">6.2.1. Семантические модели данных</a></h5>
<p>
Потребности проектировщиков баз данных в более удобных и мощных средствах моделирования предметной области вызвали к жизни направление семантических моделей данных. При том, что любая развитая семантическая модель данных, как и реляционная модель, включает структурную, манипуляционную и целостную части, главным назначением семантических моделей является обеспечение возможности выражения семантики данных.
<p>
Прежде, чем мы коротко рассмотрим особенности одной из распространенных семантических моделей, остановимся на их возможных применениях.
<p>
Наиболее часто на практике семантическое моделирование используется на первой стадии проектирования базы данных. При этом в терминах семантической модели производится концептуальная схема базы данных, которая затем вручную преобразуется к реляционной (или какой-либо другой) схеме. Этот процесс выполняется под управлением методик, в которых достаточно четко оговорены все этапы такого преобразования.
<p>
Менее часто реализуется автоматизированная компиляция концептуальной схемы в реляционную. При этом известны два подхода: на основе явного представления концептуальной схемы как исходной информации для компилятора и построения интегрированных систем проектирования с автоматизированным созданием концептуальной схемы на основе интервью с экспертами предметной области. И в том, и в другом случае в результате производится реляционная схема базы данных в третьей нормальной форме (более точно следовало бы сказать, что автору неизвестны системы, обеспечивающие более высокий уровень нормализации).
<p>
Наконец, третья возможность, которая еще не вышла (или только выходит) за пределы исследовательских и экспериментальных проектов, - это работа с базой данных в семантической модели, т.е. СУБД, основанные на семантических моделях данных. При этом снова рассматриваются два варианта: обеспечение пользовательского интерфейса на основе семантической модели данных с автоматическим отображением конструкций в реляционную модель данных (это задача примерно такого же уровня сложности, как автоматическая компиляция концептуальной схемы базы данных в реляционную схему) и прямая реализация СУБД, основанная на какой-либо семантической модели данных. Наиболее близко ко второму подходу находятся современные объектно-ориентированные СУБД, модели данных которых по многим параметрам близки к семантическим моделям (хотя в некоторых аспектах они более мощны, а в некоторых - более слабы).
<h5><a name="_2_3_2_2">6.2.2. Основные понятия модели Entity-Relationship (Сущность-Связи)</a></h5>
<p>
Далее мы кратко рассмотрим некоторые черты одной из наиболее популярных семантических моделей данных - модель &quot;Сущность-Связи&quot; (часто ее называют кратко ER-моделью).
<p>
На использовании разновидностей ER-модели основано большинство современных подходов к проектированию баз данных (главным образом, реляционных). Модель была предложена Ченом (Chen) в 1976 г. Моделирование предметной области базируется на использовании графических диаграмм, включающих небольшое число разнородных компонентов. В связи с наглядностью представления концептуальных схем баз данных ER-модели получили широкое распространение в системах CASE, поддерживающих автоматизированное проектирование реляционных баз данных. Среди множества разновидностей ER-моделей одна из наиболее развитых применяется в системе CASE фирмы ORACLE. Ее мы и рассмотрим. Более точно, мы сосредоточимся на структурной части этой модели.
<p>
Основными понятиями ER-модели являются сущность, связь и атрибут.
<p>
Сущность - это реальный или представляемый объект, информация о котором должна сохраняться и быть доступна. В диаграммах ER-модели сущность представляется в виде прямоугольника, содержащего имя сущности. При этом имя сущности - это имя типа, а не некоторого конкретного экземпляра этого типа. Для большей выразительности и лучшего понимания имя сущности может сопровождаться примерами конкретных объектов этого типа.
<p>
Ниже изображена сущность АЭРОПОРТ с примерными объектами Шереметьево и Хитроу:
<p>
<center><img src = "_pic_/img00007.gif" border=1></center>
<p>
Каждый экземпляр сущности должен быть отличим от любого другого экземпляра той же сущности (это требование в некотором роде аналогично требованию отсутствия кортежей-дубликатов в реляционных таблицах).
<p>
Связь - это графически изображаемая ассоциация, устанавливаемая между двумя сущностями. Эта ассоциация всегда является бинарной и может существовать между двумя разными сущностями или между сущностью и ей же самой (рекурсивная связь). В любой связи выделяются два конца (в соответствии с существующей парой связываемых сущностей), на каждом из которых указывается имя конца связи, степень конца связи (сколько экземпляров данной сущности связывается), обязательность связи (т.е. любой ли экземпляр данной сущности должен участвовать в данной связи).
<p>
Связь представляется в виде линии, связывающей две сущности или ведущей от сущности к ней же самой. При это в месте &quot;стыковки&quot; связи с сущностью используются трехточечный вход в прямоугольник сущности, если для этой сущности в связи могут использоваться много (many) экземпляров сущности, и одноточечный вход, если в связи может участвовать только один экземпляр сущности. Обязательный конец связи изображается сплошной линией, а необязательный - прерывистой линией.
<p>
Как и сущность, связь - это типовое понятие, все экземпляры обеих пар связываемых сущностей подчиняются правилам связывания.
<p>
В изображенном ниже примере связь между сущностями БИЛЕТ и ПАССАЖИР связывает билеты и пассажиров. При том конец сущности с именем &quot;для&quot; позволяет связывать с одним пассажиром более одного билета, причем каждый билет должен быть связан с каким-либо пассажиром. Конец сущности с именем &quot;имеет&quot; означает, что каждый билет может принадлежать только одному пассажиру, причем пассажир не обязан иметь хотя бы один билет.
<p>
<center><img src = "_pic_/img00008.gif" border=1></center>
<p>
Лаконичной устной трактовкой изображенной диаграммы является следующая:
<UL TYPE = disc>
<LI>Каждый БИЛЕТ предназначен для одного и только одного ПАССАЖИРА;
<LI>Каждый ПАССАЖИР может иметь один или более БИЛЕТОВ.
</UL>
<p>
На следующем примере изображена рекурсивная связь, связывающая сущность ЧЕЛОВЕК с ней же самой. Конец связи с именем &quot;сын&quot; определяет тот факт, что у одного отца может быть более чем один сын. Конец связи с именем &quot;отец&quot; означает, что не у каждого человека могут быть сыновья.
<p>
<center><img src = "_pic_/img00009.gif" border=1></center>
<p>
Лаконичной устной трактовкой изображенной диаграммы является следующая:
<UL TYPE = disc>
<LI>Каждый ЧЕЛОВЕК является сыном одного и только одного ЧЕЛОВЕКА;
<LI>Каждый ЧЕЛОВЕК может являться отцом для одного или более ЛЮДЕЙ (&quot;ЧЕЛОВЕКОВ&quot;).
</UL>
<p>
Атрибутом сущности является любая деталь, которая служит для уточнения, идентификации, классификации, числовой характеристики или выражения состояния сущности. Имена атрибутов заносятся в прямоугольник, изображающий сущность, под именем сущности и изображаются малыми буквами, возможно, с примерами.
<p>
Пример:
<p>
<p>
<p>
Уникальным идентификатором сущности является атрибут, комбинация атрибутов, комбинация связей или комбинация связей и атрибутов, уникально отличающая любой экземпляр сущности от других экземпляров сущности того же типа.
<h5><a name="_2_3_2_3">6.2.3. Нормальные формы ER-схем</a></h5>
<p>
Как и в реляционных схемах баз данных, в ER-схемах вводится понятие нормальных форм, причем их смысл очень близко соответствует смыслу реляционных нормальных форм. Заметим, что формулировки нормальных форм ER-схем делают более понятным смысл нормализации реляционных схем. Мы приведем только очень краткие и неформальные определения трех первых нормальных форм.
<p>
В первой нормальной форме ER-схемы устраняются повторяющиеся атрибуты или группы атрибутов, т.е. производится выявление неявных сущностей, &quot;замаскиро-ванных&quot; под атрибуты.
<p>
Во второй нормальной форме устраняются атрибуты, зависящие только от части уникального идентификатора. Эта часть уникального идентификатора определяет отдельную сущность.
<p>
В третьей нормальной форме устраняются атрибуты, зависящие от атрибутов, не входящих в уникальный идентификатор. Эти атрибуты являются основой отдельной сущности.
<h5><a name="_2_3_2_4">6.2.4. Более сложные элементы ER-модели</a></h5>
<p>
Мы остановились только на самых основных и наиболее очевидных понятиях ER-модели данных. К числу более сложных элементов модели относятся следующие:
<UL TYPE = disc>
<LI>Подтипы и супертипы сущностей. Как в языках программирования с развитыми типовыми системами (например, в языках объектно-ориентированного программирования), вводится возможность наследования типа сущности, исходя из одного или нескольких супертипов. Интересные нюансы связаны с необходимостью графического изображения этого механизма.
<LI>Связи &quot;many-to-many&quot;. Иногда бывает необходимо связывать сущности таким образом, что с обоих концов связи могут присутствовать несколько экземпляров сущности (например, все члены кооператива сообща владеют имуществом кооператива). Для этого вводится разновидность связи &quot;многие-со-многими&quot;.
<LI>Уточняемые степени связи. Иногда бывает полезно определить возможное количество экземпляров сущности, участвующих в данной связи (например, служащему разрешается участвовать не более, чем в трех проектах одновременно). Для выражения этого семантического ограничения разрешается указывать на конце связи ее максимальную или обязательную степень.
<LI>Каскадные удаления экземпляров сущностей. Некоторые связи бывают настолько сильными (конечно, в случае связи &quot;один-ко-многим&quot;), что при удалении опорного экземпляра сущности (соответствующего концу связи &quot;один&quot;) нужно удалить и все экземпляры сущности, соответствующие концу связи &quot;многие&quot;. Соответствующее требование &quot;каскадного удаления&quot; можно сформулировать при определении сущности.
<LI>Домены. Как и в случае реляционной модели данных бывает полезна возможность определения потенциально допустимого множества значений атрибута сущности (домена).
</UL>
<p>
Эти и другие более сложные элементы модели данных &quot;Сущность-Связи&quot; делают ее существенно более мощной, но одновременно несколько усложняют ее использование. Конечно, при реальном использовании ER-диаграмм для проектирования баз данных необходимо ознакомиться со всеми возможностями.
<p>
В нашей лекции мы немного подробнее разберем только один из упомянутых элементов - подтип сущности.
<p>
Сущность может быть расщеплена на два или более взаимно исключающих подтипа, каждый из которых включает общие атрибуты и/или связи. Эти общие атрибуты и/или связи явно определяются один раз на более высоком уровне. В подтипах могут определяться собственные атрибуты и/или связи. В принципе подтипизация может продолжаться на более низких уровнях, но опыт показывает, что в большинстве случаев оказывается достаточно двух-трех уровней.
<p>
Сущность, на основе которой определяются подтипы, называется супертипом. Подтипы должны образовывать полное множество, т.е. любой экземпляр супертипа должен относиться к некоторому подтипу. Иногда для полноты приходится определять дополнительный подтип ПРОЧИЕ.
<p>
Пример: Супертип ЛЕТАТЕЛЬНЫЙ АППАРАТ
<p>
<center><img src = "_pic_/img00010.gif" border=1></center>
<p>
Как полагается это читать? От супертипа: ЛЕТАТЕЛЬНЫЙ АППАРАТ, который должен быть АЭРОПЛАНОМ, ВЕРТОЛЕТОМ, ПТИЦЕЛЕТОМ или ДРУГИМ ЛЕТАТЕЛЬНЫМ АППАРАТОМ. От подтипа: ВЕРТОЛЕТ, который относится к типу ЛЕТАТЕЛЬНОГО АППАРАТА. От подтипа, который является одновременно супертипа: АЭРОПЛАН, который относится к типу ЛЕТАТЕЛЬНОГО АППАРАТА и должен быть ПЛАНЕРОМ или МОТОРНЫМ САМОЛЕТОМ.
<p>
Иногда удобно иметь два или более разных разбиения сущности на подтипы. Например, сущность ЧЕЛОВЕК может быть разбита на подтипы по профессиональному признаку (ПРОГРАММИСТ, ДОЯРКА и т.д.), а может - по половому признаку (МУЖЧИНА, ЖЕНЩИНА).
<h5><a name="_2_3_2_5">6.2.5. Получение реляционной схемы из ER-схемы</a></h5>
<p>
<b>Шаг 1.</b> Каждая простая сущность превращается в таблицу. Простая сущность - сущность, не являющаяся подтипом и не имеющая подтипов. Имя сущности становится именем таблицы.
<p>
<b>Шаг 2.</b> Каждый атрибут становится возможным столбцом с тем же именем; может выбираться более точный формат. Столбцы, соответствующие необязательным атрибутам, могут содержать неопределенные значения; столбцы, соответствующие обязательным атрибутам, - не могут.
<p>
<b>Шаг 3.</b> Компоненты уникального идентификатора сущности превращаются в первичный ключ таблицы. Если имеется несколько возможных уникальных идентификатора, выбирается наиболее используемый. Если в состав уникального идентификатора входят связи, к числу столбцов первичного ключа добавляется копия уникального идентификатора сущности, находящейся на дальнем конце связи (этот процесс может продолжаться рекурсивно). Для именования этих столбцов используются имена концов связей и/или имена сущностей.
<p>
<b>Шаг 4.</b> Связи многие-к-одному (и один-к-одному) становятся внешними ключами. Т.е. делается копия уникального идентификатора с конца связи &quot;один&quot;, и соответствующие столбцы составляют внешний ключ. Необязательные связи соответствуют столбцам, допускающим неопределенные значения; обязательные связи - столбцам, не допускающим неопределенные значения.
<p>
<b>Шаг 5.</b> Индексы создаются для первичного ключа (уникальный индекс), внешних ключей и тех атрибутов, на которых предполагается в основном базировать запросы.
<p>
<b>Шаг 6.</b> Если в концептуальной схеме присутствовали подтипы, то возможны два способа:
<UL TYPE = disc>
<LI>все подтипы в одной таблице (а)
<LI>для каждого подтипа - отдельная таблица (б)
</UL>
<p>
При применении способа (а) таблица создается для наиболее внешнего супертипа, а для подтипов могут создаваться представления. В таблицу добавляется по крайней мере один столбец, содержащий код ТИПА; он становится частью первичного ключа.
<p>
При использовании метода (б) для каждого подтипа первого уровня (для более нижних - представления) супертип воссоздается с помощью представления UNION (из всех таблиц подтипов выбираются общие столбцы - столбцы супертипа).
<table border=1 width=100%><tr><td align=center colspan= 90><b>Все в одной таблице</b><td align=center colspan= 69><b>Таблица - на подтип</b>
<tr><td align=center colspan= 159><i>Преимущества</i>
<tr><td  colspan= 90>Все хранится вместе<br>Легкий доступ к супертипу и подтипам<br>Требуется меньше таблиц<td  colspan= 69>Более ясны правила подтипов<br>Программы работают только с нужными таблицами
<tr><td align=center colspan= 159><i>Недостатки</i>
<tr><td  colspan= 90>Слишком общее решение<br>Требуется дополнительная логика работы с разными наборами столбцов и разными ограничениями<br>Потенциальное узкое место (в связи с блокировками)<br>Столбцы подтипов должны быть необязательными<br>В некоторых СУБД для хранения неопределенных значений требуется дополнительная память<td  colspan= 69>Слишком много таблиц<br>Смущающие столбцы в представлении UNION<br>Потенциальная потеря производительности при работе через UNION<br>Над супертипом невозможны модификации
</table>
<p>
<b>Шаг 7.</b> Имеется два способа работы при наличии исключающих связей:
<UL TYPE = disc>
<LI>общий домен (а)
<LI>явные внешние ключи (б)
</UL>
<p>
Если остающиеся внешние ключи все в одном домене, т.е. имеют общий формат (способ (а)), то создаются два столбца: идентификатор связи и идентификатор сущности. Столбец идентификатора связи используется для различения связей, покрываемых дугой исключения. Столбец идентификатора сущности используется для хранения значений уникального идентификатора сущности на дальнем конце соответствующей связи.
<p>
Если результирующие внешние ключи не относятся к одному домену, то для каждой связи, покрываемой дугой исключения, создаются явные столбцы внешних ключей; все эти столбцы могут содержать неопределенные значения.
<table border=1 width=100%><tr><td align=center colspan= 82><b>Общий домен</b><td align=center colspan= 77><b>Явные внешние ключи</b>
<tr><td align=center colspan= 159><i>Преимущества</i>
<tr><td  colspan= 82>Нужно только два столбца<td  colspan= 77>Условия соединения - явные
<tr><td align=center colspan= 159><i>Недостатки</i>
<tr><td  colspan= 82>Оба дополнительных атрибута должны использоваться в соединениях<td  colspan= 77>Слишком много столбцов
</table>
<p>
<p>
<i>Альтернативные модели сущностей:</i>
<p>
Вариант 1 (плохой)
<br>
<center><img src = "_pic_/img00011.gif" border=1></center>
<p>
Вариант 2 (существенно лучше, если подтипы действительно существуют)
<br>
<img src = "_pic_/img00012.gif" border=1>
<p>
Вариант 3 (годится при наличии осмысленного супертипа D).
<br>
<center><img src = "_pic_/img00013.gif" border=1></center>
<p><center><a href="glava_23.htm">Предыдущая глава</a> || <a href="contents.htm">Оглавление</a> || <a href="glava_25.htm">Следующая глава</a><p>
<p></p>
<hr noshade>
<center>
<font size=1 class=arial>
Comments: <a href="mailto:info@citmgu.ru?Subject='From bottom of CIT FORUM'" class=noneline>info@citmgu.ru</a><br>
Copyright &copy; <a href="http://www.citmgu.ru/" class=noneline>CIT</a>
</font></center></body></html>
