<html>
<head>
<title>15.2. Табличное выражение</title>
		    <style type="text/css">
A.noneline { font-family: Arial, Serif; text-decoration: none; }
FONT.arial { font-family: Arial, Serif; }
TD.arial   { font-family: Arial, Serif; }
TH.arial   { font-family: Arial, Serif; }
PRE        { font-family: Monospace; color: navy; }
SAMP       { font-family: Monospace; color: navy; }
TT         { font-family: Monospace; color: navy; }
VAR        { font-family: Monospace; color: navy; }
</style>
</head>
<body bgcolor="#FFF5EE" text="#000000" link="#FF0000" alink="#FF0000" vlink="#A52A2A">
<basefont size="3">
<center>
<table width=100% border=0 cellpadding=0>
<tr valign=top><td class=arial><a href="http://www.citforum.ru/"><img height=50 width=150 src="_pic_/logo3D.gif" alt="Server for Information Technologies" border=0></a><br>
</td>
<td align=right class=arial>
<font size="-2">
Сервер поддерживается<br>
<a class=noneline href="http://www.citmgu.ru">Центром Информационных Технологий</a><br>
(095) 932-9212, 932-9213, 939-0783<br>
E-mail: <a class=noneline href="mailto:info@citforum.ru?Subject='From page topic CIT-FORUM'">info@citforum.ru</a></font>
</tr>
<tr>
<th colspan=2 class=arial>
<font color=#000080 size=2><a href="http://www.citforum.ru" class=noneline>Сервер Информационных Технологий</a> содержит море(!) аналитической информации</font>
<hr noshade>
</th>
</tr>
</table>
</center>
<h4><a name="_5_3_2">15.2. Табличное выражение</a></h4>
<p>
Стандарт SQL/89 рекомендует рассматривать вычисление табличного выражения как последовательное применение разделов FROM, WHERE, GROUP BY и HAVING к таблицам, заданным в списке FROM. Раздел FROM имеет следующий синтаксис:
<pre>&lt;from clause&gt; ::=
   FROM &lt;table reference&gt;
 ({,&lt;table reference&gt;}...]
&lt;table reference&gt; ::=
   &lt;table name&gt; [&lt;correlation name&gt;]</pre>
<h5><a name="_5_3_2_1">15.2.1. Раздел FROM</a></h5>
<p>
Результатом выполнения раздела FROM является расширенное декартово произведение таблиц, заданных списком таблиц раздела FROM. Расширенное декартово произведение (расширенное, потому что в качестве операндов и результата допускаются мультимножества) в стандарте определяется следующим образом:
<p>
&quot;Расширенное произведение R есть мультимножество всех строк r таких, что r является конкатенацией строк из всех идентифицированных таблиц в том порядке, в котором они идентифицированы. Мощность R есть произведение мощностей идентифицированных таблиц. Порядковый номер столбца в R есть n+s, где n - порядковый номер порождающего столбца в именованной таблице T, а s - сумма степеней всех таблиц, идентифицированных до T в разделе FROM&quot;.
<p>
Как видно из синтаксиса, рядом с именем таблицы можно указывать еще одно имя &quot;correlation name&quot;. Фактически, это некоторый синоним имени таблицы, который можно использовать в других разделах табличного выражения для ссылки на строки именно этого вхождения таблицы.
<p>
Если табличное выражение содержит только раздел FROM (это единственный обязательный раздел табличного выражения), то результат табличного выражения совпадает с результатом раздела FROM.
<h5><a name="_5_3_2_2">15.2.2. Раздел WHERE</a></h5>
<p>
Если в табличном выражении присутствует раздел WHERE, то следующим вычисляется он. Синтаксис раздела WHERE следующий:
<pre>&lt;where clause&gt; ::= WHERE &lt;search condition&gt;
&lt;search condition&gt; ::=
   &lt;boolean term&gt;
 ( &lt;search condition&gt; OR &lt;boolean term&gt;
&lt;Boolean term&gt; ::=
   &lt;boolean factor&gt;
 ( &lt;boolean term&gt; AND &lt;boolean factor&gt;
&lt;boolean factor&gt; ::= [NOT] &lt;boolean primary&gt;
&lt;boolean primary&gt; ::= &lt;predicate&gt; | (&lt;search condition&gt;)</pre>
<p>
Вычисление раздела WHERE производится по следующим правилам: Пусть R - результат вычисления раздела FROM. Тогда условие поиска применяется ко всем строкам R, и результатом раздела WHERE является таблица, состоящая из тех строк R, для которого результатом вычисления условия поиска является true. Если условие выборки включает подзапросы, то каждый подзапрос вычисляется для каждого кортежа таблицы R (в стандарте используется термин &quot;effectively&quot; в том смысле, что результат должен быть таким, как если бы каждый подзапрос действительно вычислялся заново для каждого кортежа R).
<p>
Заметим, что поскольку SQL/89 допускает наличие в базе данных неопределенных значений, то вычисление условия поиска производится не в булевой, а в трехзначной логике со значениями true, false и unknown (неизвестно). Для любого предиката известно, в каких ситуациях он может порождать значение unknown. Булевские операции AND, OR и NOT работают в трехзначной логике следующим образом:
<pre>true AND unknown = unknown
unknown AND true = unknown
unknown AND unknown = unknown
true OR unknown = true
unknown OR true = true
unknown OR unknown = unknown
NOT unknown = unknown</pre>
<p>
Среди предикатов условия поиска в соответствии с SQL/89 могут находиться следующие предикаты: предикат сравнения, предикат between, предикат in, предикат like, предикат null, предикат с квантором и предикат exists. Сразу заметим, что во всех реализациях SQL на эффективность выполнения запроса существенно влияет наличие в условии поиска простых предикатов сравнения (предикатов, задающих сравнение столбца таблицы с константой). Наличие таких предикатов позволяет СУБД использовать индексы при выполнении запроса, т.е. избегать полного просмотра таблицы. Хотя в принципе язык SQL позволяет пользователям не заботиться о конкретном наборе предикатов в условии выборки (лишь бы они были синтаксически и семантически правильны), при реальном использовании SQL-ориентированных СУБД такие технические детали стоит иметь в виду.
<p>
<b>Предикат сравнения
</b><p>
Синтаксис предиката сравнения определяется следующими правилами:
<pre>&lt;comparison predicate&gt; ::=
   &lt;value expression&gt; &lt;comp op&gt;
  {&lt;value expression&gt; | &lt;subquery&gt;}
&lt;comp op&gt; ::=
   = | &lt;&gt; | &lt; | &gt; | &lt;= | &gt;=</pre>
<p>
Через &quot;&lt;&gt;&quot; обозначается операция &quot;неравенства&quot;. Арифметические выражения левой и правой частей предиката сравнения строятся по общим правилам построения арифметических выражений и могут включать в общем случае имена столбцов таблиц из раздела FROM и константы. Типы данных арифметических выражений должны быть сравнимыми (например, если тип столбца a таблицы A является типом символьных строк, то предикат &quot;a = 5&quot; недопустим).
<p>
Если правый операнд операции сравнения задается подзапросом, то дополнительным ограничением является то, что мощность результата подзапроса должна быть не более единицы. Если хотя бы один из операндов операции сравнения имеет неопределенное значение, или если правый операнд является подзапросом с пустым результатом, то значение предиката сравнения равно unknown.
<p>
Заметим, что значение арифметического выражения не определено, если в его вычислении участвует хотя бы одно неопределенное значение. Еще одно важное замечание из стандарта SQL/89: в контексте GROUP BY, DISTINCT и ORDER BY неопределенное значение выступает как специальный вид определенного значения, т.е. возможно, например, образование группы строк, значение указанного столбца которых является неопределенным. Для обеспечения переносимости прикладных программ нужно внимательно оценивать специфику работы с неопределенными значениями в конкретной СУБД.
<p>
<b>Предикат between
</b><p>
Предикат between имеет следующий синтаксис:
<pre>&lt;between predicate&gt; ::=
   &lt;value expression&gt;
   [NOT] BETWEEN &lt;value expression&gt; AND &lt;value expression&gt;</pre>
<p>
Результат &quot;x BETWEEN y AND z&quot; тот же самый, что результат &quot;x &gt;= y AND x &lt;= z&quot;. Результат &quot;x NOT BETWEEN y AND z&quot; тот же самый, что результат &quot;NOT (x BETWEEN y AND z)&quot;.
<p>
<b>Предикат in
</b><p>
Предикат in определяется следующими синтаксическими правилами:
<pre>&lt;in predicate&gt; ::=
   &lt;value expression&gt; [NOT] IN
  {&lt;subquery&gt; | (&lt;in value list&gt;)}
&lt;in value list&gt; ::=
   &lt;value specification&gt;
 {,&lt;value specification&gt;}...</pre>
<p>
Типы левого операнда и значений из списка правого операнда (напомним, что результирующая таблица подзапроса должна содержать ровно один столбец) должны быть сравнимыми.
<p>
Значение предиката равно true в том и только в том случае, когда значение левого операнда совпадает хотя бы с одним значением списка правого операнда. Если список правого операнда пуст (так может быть, если правый операнд задается подзапросом), или значение &quot;подразумеваемого&quot; предиката сравнения x = y (где x - значение арифметического выражения левого операнда) равно false для каждого элемента y списка правого операнда, то значение предиката in равно false. В противном случае значение предиката in равно unknown. По определению значение предиката &quot;x NOT IN S&quot; равно значению предиката &quot;NOT (x IN S)&quot;.
<p>
<b>Предикат like
</b><p>
Предикат like имеет следующий синтаксис:
<pre>&lt;like predicate&gt; ::=
   &lt;column specification&gt; [NOT] LIKE &lt;pattern&gt;
   [ESCAPE &lt;escape character&gt;]
&lt;pattern&gt; ::= &lt;value specification&gt;
   &lt;escape character&gt; ::= &lt;value specification&gt;</pre>
<p>
Типы данных столбца левого операнда и образца должны быть типами символьных строк. В разделе ESCAPE должен специфицироваться одиночный символ.
<p>
Значение предиката равно true, если pattern является подстрокой заданного столбца. При этом, если раздел ESCAPE отсутствует, то при сопоставлении шаблона со строкой производится специальная интерпретация двух символов шаблона: символ подчеркивания (&quot;_&quot;) обозначает любой одиночный символ; символ процента (&quot;%&quot;) обозначает последовательность произвольных символов произвольной длины (может быть, нулевой).
<p>
Если же раздел ESCAPE присутствует и специфицирует некоторый одиночный символ x, то пары символов &quot;x_&quot; и &quot;x%&quot; представляют одиночные символы &quot;_&quot; и &quot;%&quot; соответственно.
<p>
Значение предиката like есть unknown, если значение столбца, либо шаблона не определено.
<p>
Значение предиката &quot;x NOT LIKE y ESCAPE z&quot; совпадает со значением &quot;NOT x LIKE y
<br>
ESCAPE z&quot;.
<p>
<b>Предикат null
</b><p>
Предикат null описывается синтаксическим правилом:
<pre>&lt;null predicate&gt; ::=
   &lt;column specification&gt; IS [NOT] NULL</pre>
<p>
Этот предикат всегда принимает значения true или false. При этом значение &quot;x IS NULL&quot; равно true тогда и только тогда, когда значение x не определено. Значение предиката &quot;x NOT IS NULL&quot; равно значению &quot;NOT x IS NULL&quot;.
<p>
<b>Предикат с квантором
</b><p>
Предикат с квантором имеет следующий синтаксис:
<pre>&lt;quantified predicate&gt; ::=
   &lt;value expression&gt; &lt;comp op&gt; &lt;quantifier&gt; &lt;subquery&gt;
&lt;quantifier&gt; ::=
   &lt;all&gt; | &lt;some&gt;
&lt;all&gt; ::= ALL
&lt;some&gt; ::= SOME | ANY</pre>
<p>
Обозначим через x результат вычисления арифметического выражения левой части предиката, а через S результат вычисления подзапроса.
<p>
Предикат &quot;x &lt;comp op&gt; ALL S&quot; имеет значение true, если S пусто или значение предиката &quot;x &lt;comp op&gt; s&quot; равно true для каждого s, входящего в S. Предикат &quot;x &lt;comp op&gt; ALL S&quot; имеет значение false, если значение предиката &quot;x &lt;comp op&gt; s&quot; равно false хотя бы для одного s, входящего в S. В остальных случаях значение предиката &quot;x &lt;comp op&gt; ALL S&quot; равно unknown.
<p>
Предикат &quot;x &lt;comp op&gt; SOME S&quot; имеет значение false, если S пусто или значение предиката &quot;x &lt;comp op&gt; s&quot; равно false для каждого s, входящего в S. Предикат &quot;x &lt;comp op&gt; SOME S&quot; имеет значение true, если значение предиката &quot;x &lt;comp op&gt; s&quot; равно true хотя бы для одного s, входящего в S. В остальных случаях значение предиката &quot;x &lt;comp op&gt; SOME S&quot; равно unknown.
<p>
<b>Предикат exists
</b><p>
Предикат exists имеет следующий синтаксис:
<pre>&lt;exists predicate&gt; ::=
   EXISTS &lt;subquery&gt;</pre>
<p>
Значением этого предиката всегда является true или false, и это значение равно true тогда и только тогда, когда результат вычисления подзапроса не пуст.
<h5><a name="_5_3_2_3">15.2.3. Раздел GROUP BY</a></h5>
<p>
Если в табличном выражении присутствует раздел GROUP BY, то следующим выполняется он. Синтаксис раздела GROUP BY следующий:
<pre>&lt;group by clause&gt; ::=
   GROUP BY &lt;column specification&gt;
   [{,&lt;column specification&gt;}...]</pre>
<p>
Если обозначить через R таблицу, являющуюся результатом предыдущего раздела (FROM или WHERE), то результатом раздела GROUP BY является разбиение R на множество групп строк, состоящего из минимального числа групп таких, что для каждого столбца из списка столбцов раздела GROUP BY во всех строках каждой группы, включающей более одной строки, значения этого столбца равны. Для обозначения результата раздела GROUP BY в стандарте используется термин &quot;сгруппированная таблица&quot;.
<h5><a name="_5_3_2_4">15.2.4. Раздел HAVING</a></h5>
<p>
Наконец, последним при вычислении табличного выражения используется раздел HAVING (если он присутствует). Синтаксис этого раздела следующий:
<pre>&lt;having clause&gt; ::=
   HAVING &lt;search condition&gt;</pre>
<p>
Раздел HAVING может осмысленно появиться в табличном выражении только в том случае, когда в нем присутствует раздел GROUP BY. Условие поиска этого раздела задает условие на группу строк сгруппированной таблицы. Формально раздел HAVING может присутствовать и в табличном выражении, не содержащем GROUP BY. В этом случае полагается, что результат вычисления предыдущих разделов представляет собой сгруппированную таблицу, состоящую из одной группы без выделенных столбцов группирования.
<p>
Условие поиска раздела HAVING строится по тем же синтаксическим правилам, что и условие поиска раздела WHERE, и может включать те же самые предикаты. Однако имеются специальные синтаксические ограничения по части использования в условии поиска спецификаций столбцов таблиц из раздела FROM данного табличного выражения. Эти ограничения следуют из того, что условие поиска раздела HAVING задает условие на целую группу, а не на индивидуальные строки.
<p>
Поэтому в арифметических выражениях предикатов, входящих в условие выборки раздела HAVING, прямо можно использовать только спецификации столбцов, указанных в качестве столбцов группирования в разделе GROUP BY. Остальные столбцы можно специфицировать только внутри спецификаций агрегатных функций COUNT, SUM, AVG, MIN и MAX, вычисляющих в данном случае некоторое агрегатное значение для всей группы строк. Аналогично обстоит дело с подзапросами, входящими в предикаты условия выборки раздела HAVING: если в подзапросе используется характеристика текущей группы, то она может задаваться только путем ссылки на столбцы группирования.
<p>
Результатом выполнения раздела HAVING является сгруппированная таблица, содержащая только те группы строк, для которых результат вычисления условия поиска есть true. В частности, если раздел HAVING присутствует в табличном выражении, не содержащем GROUP BY, то результатом его выполнения будет либо пустая таблица, либо результат выполнения предыдущих разделов табличного выражения, рассматриваемый как одна группа без столбцов группирования.
<p><center><a href="glava_61.htm">Предыдущая глава</a> || <a href="contents.htm">Оглавление</a> || <a href="glava_63.htm">Следующая глава</a><p>
<p></p>
<hr noshade>
<center>
<font size=1 class=arial>
Comments: <a href="mailto:info@citmgu.ru?Subject='From bottom of CIT FORUM'" class=noneline>info@citmgu.ru</a><br>
Copyright &copy; <a href="http://www.citmgu.ru/" class=noneline>CIT</a>
</font></center></body></html>
