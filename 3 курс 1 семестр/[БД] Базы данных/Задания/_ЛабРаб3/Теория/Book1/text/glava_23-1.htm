<html>

<head>
<meta name="Description"
content="Oaio? Eioi?iaoeiiiuo Oaoiieiaee. Eociaoia N. A., eioi?iaoeiiii-aiaeeoe?aneea iaoa?eaeu. 6.1. I?iaeoe?iaaiea ?aeyoeiiiuo aac aaiiuo n eniieuciaaieai ii?iaeecaoee
">
<title></title>
</head>

<body background="back1.jpg">
<p>6.1. Проектирование реляционных баз данных с
использованием нормализации </p>
<basefont size="3">

<hr noshade width="90%">

<h4><a name="_2_3_1">6.1. Проектирование реляционных баз
данных с использованием нормализации</a></h4>

<p>Сначала будет рассмотрен классический подход,
при котором весь процесс проектирования
производится в терминах реляционной модели
данных методом последовательных приближений к
удовлетворительному набору схем отношений.
Исходной точкой является представление
предметной области в виде одного или нескольких
отношений, и на каждом шаге проектирования
производится некоторый набор схем отношений,
обладающих лучшими свойствами. Процесс
проектирования представляет собой процесс
нормализации схем отношений, причем каждая
следующая нормальная форма обладает свойствами
лучшими, чем предыдущая. </p>

<p>Каждой нормальной форме соответствует
некоторый определенный набор ограничений, и
отношение находится в некоторой нормальной
форме, если удовлетворяет свойственному ей
набору ограничений. Примером набора ограничений
является ограничение первой нормальной формы -
значения всех атрибутов отношения атомарны.
Поскольку требование первой нормальной формы
является базовым требованием классической
реляционной модели данных, мы будем считать, что
исходный набор отношений уже соответствует
этому требованию. </p>

<p>В теории реляционных баз данных обычно
выделяется следующая последовательность
нормальных форм: 

<ul TYPE="disc">
  <li>первая нормальная форма (1NF); </li>
  <li>вторая нормальная форма (2NF); </li>
  <li>третья нормальная форма (3NF); </li>
  <li>нормальная форма Бойса-Кодда (BCNF); </li>
  <li>четвертая нормальная форма (4NF); </li>
  <li>пятая нормальная форма, или нормальная форма
    проекции-соединения (5NF или PJ/NF). </li>
</ul>

<p>Основные свойства нормальных форм: 

<ul TYPE="disc">
  <li>каждая следующая нормальная форма в некотором
    смысле лучше предыдущей; </li>
  <li>при переходе к следующей нормальной форме
    свойства предыдущих нормальных свойств
    сохраняются. </li>
</ul>

<p>В основе процесса проектирования лежит метод
нормализации, декомпозиция отношения,
находящегося в предыдущей нормальной форме, в
два или более отношения, удовлетворяющих
требованиям следующей нормальной формы. </p>

<p>Наиболее важные на практике нормальные формы
отношений основываются на фундаментальном в
теории реляционных баз данных понятии <i>функциональной
зависимости</i>. Для дальнейшего изложения нам
потребуются несколько определений. </p>

<p><b>Определение 1.</b> <i>Функциональная зависимость</i>
</p>

<p>В отношении R атрибут Y функционально зависит от
атрибута X (X и Y могут быть составными) в том и
только в том случае, если каждому значению X
соответствует в точности одно значение Y: R.X (r) R.Y. </p>

<p><b>Определение 2.</b> <i>Полная функциональная
зависимость</i> </p>

<p>Функциональная зависимость R.X (r) R.Y называется
полной, если атрибут Y не зависит функционально
от любого точного подмножества X. </p>

<p><b>Определение 3. </b><i>Транзитивная
функциональная зависимость</i> </p>

<p>Функциональная зависимость R.X <font face="Symbol">(r)</font>
R.Y называется транзитивной, если существует
такой атрибут Z, что имеются функциональные
зависимости R.X <font face="Symbol">(r)</font> R.Z и R.Z <font face="Symbol">(r)</font>
R.Y и отсутствует функциональная зависимость R.Z
--&gt; R.X. (При отсутствии последнего требования мы
имели бы &quot;неинтересные&quot; транзитивные
зависимости в любом отношении, обладающем
несколькими ключами.) </p>

<p><b>Определение 4.</b> <i>Неключевой атрибут</i> </p>

<p>Неключевым атрибутом называется любой атрибут
отношения, не входящий в состав первичного ключа
(в частности, первичного). </p>

<p><b>Определение 5.</b> <i>Взаимно независимые
атрибуты</i> </p>

<p>Два или более атрибута взаимно независимы, если
ни один из этих атрибутов не является
функционально зависимым от других. </p>

<h5><a name="_2_3_1_1">6.1.1. Вторая нормальная форма</a></h5>

<p>Рассмотрим следующий пример схемы отношения: </p>

<p>СОТРУДНИКИ-ОТДЕЛЫ-ПРОЕКТЫ </p>

<p>(СОТР_НОМЕР, СОТР_ЗАРП, ОТД_НОМЕР, ПРО_НОМЕР,
СОТР_ЗАДАН) </p>

<p>Первичный ключ: </p>

<p>СОТР_НОМЕР, ПРО_НОМЕР </p>

<p>Функциональные зависимости: </p>

<p>СОТР_НОМЕР <font face="Symbol">(r)</font> СОТР_ЗАРП </p>

<p>СОТР_НОМЕР <font face="Symbol">(r)</font> ОТД_НОМЕР </p>

<p>ОТД_НОМЕР <font face="Symbol">(r)</font> СОТР_ЗАРП </p>

<p>СОТР_НОМЕР, ПРО_НОМЕР <font face="Symbol">(r)</font>
СОТР_ЗАДАН </p>

<p>Как видно, хотя первичным ключом является
составной атрибут СОТР_НОМЕР, ПРО_НОМЕР, атрибуты
СОТР_ЗАРП и ОТД_НОМЕР функционально зависят от
части первичного ключа, атрибута СОТР_НОМЕР. В
результате мы не сможем вставить в отношение
СОТРУДНИКИ-ОТДЕЛЫ-ПРОЕКТЫ кортеж, описывающий
сотрудника, который еще не выполняет никакого
проекта (первичный ключ не может содержать
неопределенное значение). При удалении кортежа
мы не только разрушаем связь данного сотрудника
с данным проектом, но утрачиваем информацию о
том, что он работает в некотором отделе. При
переводе сотрудника в другой отдел мы будем
вынуждены модифицировать все кортежи,
описывающие этого сотрудника, или получим
несогласованный результат. Такие неприятные
явления называются аномалиями схемы отношения.
Они устраняются путем нормализации. </p>

<p><b>Определение 6.</b> <i>Вторая нормальная форма (в
этом определении предполагается, что
единственным ключом отношения является
первичный ключ)</i> </p>

<p>Отношение R находится во второй нормальной
форме (2NF) в том и только в том случае, когда
находится в 1NF, и каждый неключевой атрибут
полностью зависит от первичного ключа. </p>

<p>Можно произвести следующую декомпозицию
отношения СОТРУДНИКИ-ОТДЕЛЫ-ПРОЕКТЫ в два
отношения СОТРУДНИКИ-ОТДЕЛЫ и
СОТРУДНИКИ-ПРОЕКТЫ: </p>

<p>СОТРУДНИКИ-ОТДЕЛЫ (СОТР_НОМЕР, СОТР_ЗАРП,
ОТД_НОМЕР) </p>

<p>Первичный ключ: </p>

<p>СОТР_НОМЕР </p>

<p>Функциональные зависимости: </p>

<p>СОТР_НОМЕР <font face="Symbol">(r)</font> СОТР_ЗАРП </p>

<p>СОТР_НОМЕР <font face="Symbol">(r)</font> ОТД_НОМЕР </p>

<p>ОТД_НОМЕР <font face="Symbol">(r)</font> СОТР_ЗАРП </p>

<p>СОТРУДНИКИ-ПРОЕКТЫ (СОТР_НОМЕР, ПРО_НОМЕР,
СОТР_ЗАДАН) </p>

<p>Первичный ключ: </p>

<p>СОТР_НОМЕР, ПРО_НОМЕР </p>

<p>Функциональные зависимости: </p>

<p>СОТР_НОМЕР, ПРО_НОМЕР <font face="Symbol">(r)</font>
CОТР_ЗАДАН </p>

<p>Каждое из этих двух отношений находится в 2NF, и в
них устранены отмеченные выше аномалии (легко
проверить, что все указанные операции
выполняются без проблем). </p>

<p>Если допустить наличие нескольких ключей, то
определение 6 примет следующий вид: </p>

<p><b>Определение 6~ </b></p>

<p>Отношение R находится во второй нормальной
форме (2NF) в том и только в том случае, когда оно
находится в 1NF, и каждый неключевой атрибут
полностью зависит от каждого ключа R. </p>

<p>Здесь и далее мы не будем приводить примеры для
отношений с несколькими ключами. Они слишком
громоздки и относятся к ситуациям, редко
встречающимся на практике. </p>

<h5><a name="_2_3_1_2">6.1.2. Третья нормальная форма</a></h5>

<p>Рассмотрим еще раз отношение
СОТРУДНИКИ-ОТДЕЛЫ, находящееся в 2NF. Заметим, что
функциональная зависимость СОТР_НОМЕР <font
face="Symbol">(r)</font> СОТР_ЗАРП является транзитивной;
она является следствием функциональных
зависимостей СОТР_НОМЕР <font face="Symbol">(r)</font>
ОТД_НОМЕР и ОТД_НОМЕР <font face="Symbol">(r)</font> СОТР_ЗАРП.
Другими словами, заработная плата сотрудника на
самом деле является характеристикой не
сотрудника, а отдела, в котором он работает (это
не очень естественное предположение, но
достаточное для примера). </p>

<p>В результате мы не сможем занести в базу данных
информацию, характеризующую заработную плату
отдела, до тех пор, пока в этом отделе не появится
хотя бы один сотрудник (первичный ключ не может
содержать неопределенное значение). При удалении
кортежа, описывающего последнего сотрудника
данного отдела, мы лишимся информации о
заработной плате отдела. Чтобы согласованным
образом изменить заработную плату отдела, мы
будем вынуждены предварительно найти все
кортежи, описывающие сотрудников этого отдела.
Т.е. в отношении СОТРУДИКИ-ОТДЕЛЫ по-прежнему
существуют аномалии. Их можно устранить путем
дальнейшей нормализации. </p>

<p><b>Определение 7.</b> <i>Третья нормальная форма.
(Снова определение дается в предположении
существования единственного ключа.)</i> </p>

<p>Отношение R находится в третьей нормальной
форме (3NF) в том и только в том случае, если
находится в 2NF и каждый неключевой атрибут
нетранзитивно зависит от первичного ключа. </p>

<p>Можно произвести декомпозицию отношения
СОТРУДНИКИ-ОТДЕЛЫ в два отношения СОТРУДНИКИ и
ОТДЕЛЫ: </p>

<p>СОТРУДНИКИ (СОТР_НОМЕР, ОТД_НОМЕР) </p>

<p>Первичный ключ: </p>

<p>СОТР_НОМЕР </p>

<p>Функциональные зависимости: </p>

<p>СОТР_НОМЕР <font face="Symbol">(r)</font> ОТД_НОМЕР </p>

<p>ОТДЕЛЫ (ОТД_НОМЕР, СОТР_ЗАРП) </p>

<p>Первичный ключ: </p>

<p>ОТД_НОМЕР </p>

<p>Функциональные зависимости: </p>

<p>ОТД_НОМЕР <font face="Symbol">(r)</font> СОТР_ЗАРП </p>

<p>Каждое из этих двух отношений находится в 3NF и
свободно от отмеченных аномалий. </p>

<p>Если отказаться от того ограничения, что
отношение обладает единственным ключом, то
определение 3NF примет следующую форму: </p>

<p><b>Определение 7~ </b></p>

<p>Отношение R находится в третьей нормальной
форме (3NF) в том и только в том случае, если
находится в 1NF, и каждый неключевой атрибут не
является транзитивно зависимым от какого-либо
ключа R. </p>

<p>На практике третья нормальная форма схем
отношений достаточна в большинстве случаев, и
приведением к третьей нормальной форме процесс
проектирования реляционной базы данных обычно
заканчивается. Однако иногда полезно продолжить
процесс нормализации. </p>

<h5><a name="_2_3_1_3">6.1.3. Нормальная форма Бойса-Кодда</a></h5>

<p>Рассмотрим следующий пример схемы отношения: </p>

<p>СОТРУДНИКИ-ПРОЕКТЫ (СОТР_НОМЕР, СОТР_ИМЯ,
ПРО_НОМЕР, СОТР_ЗАДАН) </p>

<p>Возможные ключи: </p>

<p>СОТР_НОМЕР, ПРО_НОМЕР </p>

<p>СОТР_ИМЯ, ПРО_НОМЕР </p>

<p>Функциональные зависимости: </p>

<p>СОТР_НОМЕР <font face="Symbol">(r)</font> CОТР_ИМЯ </p>

<p>СОТР_НОМЕР <font face="Symbol">(r)</font> ПРО_НОМЕР </p>

<p>СОТР_ИМЯ <font face="Symbol">(r)</font> CОТР_НОМЕР </p>

<p>СОТР_ИМЯ <font face="Symbol">(r)</font> ПРО_НОМЕР </p>

<p>СОТР_НОМЕР, ПРО_НОМЕР <font face="Symbol">(r)</font>
CОТР_ЗАДАН </p>

<p>СОТР_ИМЯ, ПРО_НОМЕР <font face="Symbol">(r)</font> CОТР_ЗАДАН </p>

<p>В этом примере мы предполагаем, что личность
сотрудника полностью определяется как его
номером, так и именем (это снова не очень
жизненное предположение, но достаточное для
примера). </p>

<p>В соответствии с определением 7~ отношение
СОТРУДНИКИ-ПРОЕКТЫ находится в 3NF. Однако тот
факт, что имеются функциональные зависимости
атрибутов отношения от атрибута, являющегося
частью первичного ключа, приводит к аномалиям.
Например, для того, чтобы изменить имя сотрудника
с данным номером согласованным образом, нам
потребуется модифицировать все кортежи,
включающие его номер. </p>

<p><b>Определение 8.</b> <i>Детерминант</i> </p>

<p>Детерминант - любой атрибут, от которого
полностью функционально зависит некоторый
другой атрибут. </p>

<p><b>Определение 9.</b> <i>Нормальная форма
Бойса-Кодда</i> </p>

<p>Отношение R находится в нормальной форме
Бойса-Кодда (BCNF) в том и только в том случае, если
каждый детерминант является возможным ключом. </p>

<p>Очевидно, что это требование не выполнено для
отношения СОТРУДНИКИ-ПРОЕКТЫ. Можно произвести
его декомпозицию к отношениям СОТРУДНИКИ и
СОТРУДНИКИ-ПРОЕКТЫ: </p>

<p>СОТРУДНИКИ (СОТР_НОМЕР, СОТР_ИМЯ) </p>

<p>Возможные ключи: </p>

<p>СОТР_НОМЕР </p>

<p>СОТР_ИМЯ </p>

<p>Функциональные зависимости: </p>

<p>СОТР_НОМЕР <font face="Symbol">(r)</font> CОТР_ИМЯ </p>

<p>СОТР_ИМЯ <font face="Symbol">(r)</font> СОТР_НОМЕР </p>

<p>СОТРУДНИКИ-ПРОЕКТЫ (СОТР_НОМЕР, ПРО_НОМЕР,
СОТР_ЗАДАН) </p>

<p>Возможный ключ: </p>

<p>СОТР_НОМЕР, ПРО_НОМЕР </p>

<p>Функциональные зависимости: </p>

<p>СОТР_НОМЕР, ПРО_НОМЕР <font face="Symbol">(r)</font>
CОТР_ЗАДАН </p>

<p>Возможна альтернативная декомпозиция, если
выбрать за основу СОТР_ИМЯ. В обоих случаях
получаемые отношения СОТРУДНИКИ и
СОТРУДНИКИ-ПРОЕКТЫ находятся в BCNF, и им не
свойственны отмеченные аномалии. </p>

<h5><a name="_2_3_1_4">6.1.4. Четвертая нормальная форма</a></h5>

<p>Рассмотрим пример следующей схемы отношения: </p>

<p>ПРОЕКТЫ (ПРО_НОМЕР,ПРО_СОТР, ПРО_ЗАДАН) </p>

<p>Отношение ПРОЕКТЫ содержит номера проектов,
для каждого проекта список сотрудников, которые
могут выполнять проект, и список заданий,
предусматриваемых проектом. Сотрудники могут
участвовать в нескольких проектах, и разные
проекты могут включать одинаковые задания. </p>

<p>Каждый кортеж отношения связывает некоторый
проект с сотрудником, участвующим в этом проекте,
и заданием, который сотрудник выполняет в рамках
данного проекта (мы предполагаем, что любой
сотрудник, участвующий в проекте, выполняет все
задания, предусмотренные этим проектом). По
причине сформулированных выше условий
единственным возможным ключем отношения
является составной атрибут ПРО_НОМЕР, ПРО_СОТР,
ПРО_ЗАДАН, и нет никаких других детерминантов.
Следовательно, отношение ПРОЕКТЫ находится в BCNF.
Но при этом оно обладает недостатками: если,
например, некоторый сотрудник присоединяется к
данному проекту, необходимо вставить в отношение
ПРОЕКТЫ столько кортежей, сколько заданий в нем
предусмотрено. </p>

<p><b>Определение 10.</b> <i>Многозначные зависимости</i>
</p>

<p>В отношении R (A, B, C) существует многозначная
зависимость R.A <font face="Symbol">(r)</font> <font face="Symbol">(r)</font>
R.B в том и только в том случае, если множество
значений B, соответствующее паре значений A и C,
зависит только от A и не зависит от С. </p>

<p>В отношении ПРОЕКТЫ существуют следующие две
многозначные зависимости: </p>

<p>ПРО_НОМЕР <font face="Symbol">(r)</font> <font face="Symbol">(r)</font>
ПРО_СОТР </p>

<p>ПРО_НОМЕР <font face="Symbol">(r)</font> <font face="Symbol">(r)</font>
ПРО_ЗАДАН </p>

<p>Легко показать, что в общем случае в отношении R
(A, B, C) существует многозначная зависимость R.A <font
face="Symbol">(r)</font> <font face="Symbol">(r)</font> R.B в том и только в
том случае, когда существует многозначная
зависимость R.A <font face="Symbol">(r)</font> <font face="Symbol">(r)</font>
R.C. </p>

<p>Дальнейшая нормализация отношений, подобных
отношению ПРОЕКТЫ, основывается на следующей
теореме: </p>

<p><b>Теорема Фейджина </b></p>

<p>Отношение R (A, B, C) можно спроецировать без
потерь в отношения R1 (A, B) и R2 (A, C) в том и только в
том случае, когда существует MVD A <font face="Symbol">(r)</font> <font
face="Symbol">(r)</font> B | C. </p>

<p>Под проецированием без потерь понимается такой
способ декомпозиции отношения, при котором
исходное отношение полностью и без избыточности
восстанавливается путем естественного
соединения полученных отношений. </p>

<p><b>Определение 11.</b> <i>Четвертая нормальная форма</i>
</p>

<p>Отношение R находится в четвертой нормальной
форме (4NF) в том и только в том случае, если в
случае существования многозначной зависимости A <font
face="Symbol">(r)</font> <font face="Symbol">(r)</font> B все остальные
атрибуты R функционально зависят от A. </p>

<p>В нашем примере можно произвести декомпозицию
отношения ПРОЕКТЫ в два отношения
ПРОЕКТЫ-СОТРУДНИКИ и ПРОЕКТЫ-ЗАДАНИЯ: </p>

<p>ПРОЕКТЫ-СОТРУДНИКИ (ПРО_НОМЕР, ПРО_СОТР) </p>

<p>ПРОЕКТЫ-ЗАДАНИЯ (ПРО_НОМЕР, ПРО_ЗАДАН) </p>

<p>Оба эти отношения находятся в 4NF и свободны от
отмеченных аномалий. </p>

<h5><a name="_2_3_1_5">6.1.5. Пятая нормальная форма</a></h5>

<p>Во всех рассмотренных до этого момента
нормализациях производилась декомпозиция
одного отношения в два. Иногда это сделать не
удается, но возможна декомпозиция в большее
число отношений, каждое из которых обладает
лучшими свойствами. </p>

<p>Рассмотрим, например, отношение </p>

<p>СОТРУДНИКИ-ОТДЕЛЫ-ПРОЕКТЫ (СОТР_НОМЕР,
ОТД_НОМЕР, ПРО_НОМЕР) </p>

<p>Предположим, что один и тот же сотрудник может
работать в нескольких отделах и работать в
каждом отделе над несколькими проектами.
Первичным ключем этого отношения является
полная совокупность его атрибутов, отсутствуют
функциональные и многозначные зависимости. </p>

<p>Поэтому отношение находится в 4NF. Однако в нем
могут существовать аномалии, которые можно
устранить путем декомпозиции в три отношения. </p>

<p><b>Определение 12.</b> <i>Зависимость соединения</i> </p>

<p>Отношение R (X, Y, ..., Z) удовлетворяет зависимости
соединения * (X, Y, ..., Z) в том и только в том случае,
когда R восстанавливается без потерь путем
соединения своих проекций на X, Y, ..., Z. </p>

<p><b>Определение 13.</b> <i>Пятая нормальная форма</i> </p>

<p>Отношение R находится в пятой нормальной форме
(нормальной форме проекции-соединения - PJ/NF) в том
и только в том случае, когда любая зависимость
соединения в R следует из существования
некоторого возможного ключа в R. </p>

<p>Введем следующие имена составных атрибутов: </p>

<p>СО = {СОТР_НОМЕР, ОТД_НОМЕР} </p>

<p>СП = {СОТР_НОМЕР, ПРО_НОМЕР} </p>

<p>ОП = {ОТД_НОМЕР, ПРО_НОМЕР} </p>

<p>Предположим, что в отношении
СОТРУДНИКИ-ОТДЕЛЫ-ПРОЕКТЫ существует
зависимость соединения: </p>

<p>* (СО, СП, ОП) </p>

<p>На примерах легко показать, что при вставках и
удалениях кортежей могут возникнуть проблемы. Их
можно устранить путем декомпозиции исходного
отношения в три новых отношения: </p>

<p>СОТРУДНИКИ-ОТДЕЛЫ (СОТР_НОМЕР, ОТД_НОМЕР) </p>

<p>СОТРУДНИКИ-ПРОЕКТЫ (СОТР_НОМЕР, ПРО_НОМЕР) </p>

<p>ОТДЕЛЫ-ПРОЕКТЫ (ОТД_НОМЕР, ПРО_НОМЕР) </p>

<p>Пятая нормальная форма - это последняя
нормальная форма, которую можно получить путем
декомпозиции. Ее условия достаточно
нетривиальны, и на практике 5NF не используется.
Заметим, что зависимость соединения является
обобщением как многозначной зависимости, так и
функциональной зависимости. </p>

<p align="center"><a href="glava_22-1.htm" tppabs="http://www.nioch.nsc.ru/~xam/BASE/glava_22.htm">Предыдущая глава</a> || <a
href="contents.htm" tppabs="http://www.nioch.nsc.ru/~xam/BASE/contents.htm">Оглавление</a> || <a href="glava_24-1.htm" tppabs="http://www.nioch.nsc.ru/~xam/BASE/glava_24.htm">Следующая
глава</a></p>
</body>
</html>
